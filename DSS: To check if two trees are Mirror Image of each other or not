#include <bits/stdc++.h>
using namespace std;


typedef struct node{
    int data;
    struct node *left;
    struct node *right;
}Node;

Node *root1 = NULL;
Node *root2 = NULL;

Node *createNode(int data)
{
    Node *newnode = (Node*)malloc(sizeof(Node));
    newnode->data = data;
    newnode->left = NULL;
    newnode->right = NULL;

    return newnode;
}

int flag = 1;

void mirrorTree(node *a, node *b)
{
    if(a == NULL && b == NULL)
    return;

  if(a == NULL || b == NULL)
  {
    flag = 0;
    return;
  }

  long long c = a->data;
  long long d = b->data;

  if(c!=d)
  {
    flag = 0;
    return;
  }

  mirrorTree(a->left, b->right);
  mirrorTree(a->right, b->left);

}

bool checkMirrorTree(node* a, node* b)
{
    //write your code here
    mirrorTree(a,b);
    return flag;

}


int  main()
{
    //For tree 1
    root1 = createNode(1);
    root1->left = createNode(4);
    root1->right = createNode(5);

    root1->left->left = createNode(3);
    root1->left->right = createNode(2);

    root1->right->left = createNode(6);
    root1->right->right = createNode(7);

    //For tree 2
    root2 = createNode(1);
    root2->left = createNode(5);
    root2->right = createNode(4);

    root2->left->left = createNode(7);
    root2->left->right = createNode(6);

    root2->right->left = createNode(2);
    root2->right->right = createNode(3);

    bool f = checkMirrorTree(root1, root2);
    cout<<f<<endl;

    return 0;
}
